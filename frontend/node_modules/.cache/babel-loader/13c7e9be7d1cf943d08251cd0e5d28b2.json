{"ast":null,"code":"var _jsxFileName = \"/home/TemporalEgoKCoreDemo/frontend/src/pages/Graph.jsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport CytoscapeComponent from 'react-cytoscapejs';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport '../App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Graph = () => {\n  _s();\n\n  const [success, setSuccess] = React.useState(false);\n  const [elements, setElement] = React.useState([]);\n  const id = useParams().id;\n  const start = useParams().start;\n  const end = useParams().end;\n  const k = useParams().k;\n  const navigate = useNavigate();\n  React.useState(async () => {\n    const response = await fetch('http://127.0.0.1:5000/id/', {\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      },\n      params: {\n        'id': id,\n        'start': start,\n        'end': end,\n        'k': k\n      }\n    });\n    const result = await response.json();\n\n    if (response.status === 200) {\n      setElement(result.elements);\n      setSuccess(true);\n      console.log(elements);\n    } else {\n      alert(result.error);\n      navigate('/');\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: success && /*#__PURE__*/_jsxDEV(CytoscapeComponent, {\n      elements: elements,\n      style: {\n        width: '100vw',\n        height: 'calc(100vh - 50px)'\n      },\n      stylesheet: [{\n        selector: 'node',\n        style: {\n          width: 20,\n          height: 20,\n          color: 'black',\n          label: 'data(label)'\n        }\n      }, {\n        selector: 'edge',\n        style: {\n          width: 1,\n          color: '#123333'\n        }\n      }],\n      layout: {\n        name: 'circle'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 17\n    }, this)\n  }, void 0, false);\n};\n\n_s(Graph, \"+adrUbhVjvwDVoGogqB9Mq4AgZM=\", false, function () {\n  return [useParams, useParams, useParams, useParams, useNavigate];\n});\n\n_c = Graph;\nexport default Graph;\n\nvar _c;\n\n$RefreshReg$(_c, \"Graph\");","map":{"version":3,"names":["React","CytoscapeComponent","useNavigate","useParams","Graph","success","setSuccess","useState","elements","setElement","id","start","end","k","navigate","response","fetch","headers","params","result","json","status","console","log","alert","error","width","height","selector","style","color","label","name"],"sources":["/home/TemporalEgoKCoreDemo/frontend/src/pages/Graph.jsx"],"sourcesContent":["import React from 'react';\nimport CytoscapeComponent from 'react-cytoscapejs';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport '../App.css';\n\nconst Graph = () => {\n  const [success, setSuccess] = React.useState(false);\n  const [elements, setElement] = React.useState([]);\n  const id = useParams().id;\n  const start = useParams().start;\n  const end = useParams().end;\n  const k = useParams().k;\n  const navigate = useNavigate();\n\n  React.useState(\n    async () => {\n      const response = await fetch('http://127.0.0.1:5000/id/',{\n        headers : { \n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n        },\n        params : {\n          'id': id,\n          'start': start,\n          'end': end,\n          'k': k\n        }\n      });\n      const result = await response.json();\n      if(response.status === 200) {\n        setElement(result.elements);\n        setSuccess(true);\n        console.log(elements);\n      } else {\n        alert(result.error);\n        navigate('/');\n      }\n    }\n  )\n  \n  return <>\n    {success && <CytoscapeComponent\n      elements={elements}\n      style={ { width: '100vw', height: 'calc(100vh - 50px)'}}\n      stylesheet={[\n        {\n          selector: 'node',\n          style: {\n            width: 20,\n            height: 20,\n            color: 'black',\n            label: 'data(label)'\n          }\n        },\n        {\n          selector: 'edge',\n          style: {\n            width: 1,\n            color: '#123333'\n          }\n        }\n      ]}\n      layout={{\n        name:'circle'\n      }}\n    />}\n  </>\n}\n\nexport default Graph;\n"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,kBAAP,MAA+B,mBAA/B;AACA,SAASC,WAAT,EAAsBC,SAAtB,QAAuC,kBAAvC;AACA,OAAO,YAAP;;;;AAEA,MAAMC,KAAK,GAAG,MAAM;EAAA;;EAClB,MAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBN,KAAK,CAACO,QAAN,CAAe,KAAf,CAA9B;EACA,MAAM,CAACC,QAAD,EAAWC,UAAX,IAAyBT,KAAK,CAACO,QAAN,CAAe,EAAf,CAA/B;EACA,MAAMG,EAAE,GAAGP,SAAS,GAAGO,EAAvB;EACA,MAAMC,KAAK,GAAGR,SAAS,GAAGQ,KAA1B;EACA,MAAMC,GAAG,GAAGT,SAAS,GAAGS,GAAxB;EACA,MAAMC,CAAC,GAAGV,SAAS,GAAGU,CAAtB;EACA,MAAMC,QAAQ,GAAGZ,WAAW,EAA5B;EAEAF,KAAK,CAACO,QAAN,CACE,YAAY;IACV,MAAMQ,QAAQ,GAAG,MAAMC,KAAK,CAAC,2BAAD,EAA6B;MACvDC,OAAO,EAAG;QACR,gBAAgB,kBADR;QAER,UAAU;MAFF,CAD6C;MAKvDC,MAAM,EAAG;QACP,MAAMR,EADC;QAEP,SAASC,KAFF;QAGP,OAAOC,GAHA;QAIP,KAAKC;MAJE;IAL8C,CAA7B,CAA5B;IAYA,MAAMM,MAAM,GAAG,MAAMJ,QAAQ,CAACK,IAAT,EAArB;;IACA,IAAGL,QAAQ,CAACM,MAAT,KAAoB,GAAvB,EAA4B;MAC1BZ,UAAU,CAACU,MAAM,CAACX,QAAR,CAAV;MACAF,UAAU,CAAC,IAAD,CAAV;MACAgB,OAAO,CAACC,GAAR,CAAYf,QAAZ;IACD,CAJD,MAIO;MACLgB,KAAK,CAACL,MAAM,CAACM,KAAR,CAAL;MACAX,QAAQ,CAAC,GAAD,CAAR;IACD;EACF,CAvBH;EA0BA,oBAAO;IAAA,UACJT,OAAO,iBAAI,QAAC,kBAAD;MACV,QAAQ,EAAEG,QADA;MAEV,KAAK,EAAG;QAAEkB,KAAK,EAAE,OAAT;QAAkBC,MAAM,EAAE;MAA1B,CAFE;MAGV,UAAU,EAAE,CACV;QACEC,QAAQ,EAAE,MADZ;QAEEC,KAAK,EAAE;UACLH,KAAK,EAAE,EADF;UAELC,MAAM,EAAE,EAFH;UAGLG,KAAK,EAAE,OAHF;UAILC,KAAK,EAAE;QAJF;MAFT,CADU,EAUV;QACEH,QAAQ,EAAE,MADZ;QAEEC,KAAK,EAAE;UACLH,KAAK,EAAE,CADF;UAELI,KAAK,EAAE;QAFF;MAFT,CAVU,CAHF;MAqBV,MAAM,EAAE;QACNE,IAAI,EAAC;MADC;IArBE;MAAA;MAAA;MAAA;IAAA;EADP,iBAAP;AA2BD,CA9DD;;GAAM5B,K;UAGOD,S,EACGA,S,EACFA,S,EACFA,S,EACOD,W;;;KAPbE,K;AAgEN,eAAeA,KAAf"},"metadata":{},"sourceType":"module"}